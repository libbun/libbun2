parsed:
#translationunit {            ## by peg : ( Spacing (ExternalDeclaration^)+ EOT  ) defined in TranslationUnit
   #declaration {            ## by peg : ( DeclarationNoAttribute^ ((Attribute / Assembler)^)? SEMI  ) defined in Declaration
      #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)+  ) defined in DeclarationSpecifiers
         #typespecifier {            ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
            #struct: struct    ## by peg : ( STRUCT  ) defined in StructOrUnion
            #identifier: student    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
            #structdeclaration {            ## by peg : ( SpecifierQualifierList (StructDeclaratorList^)? SEMI  ) defined in StructDeclaration
               #typespecifier: int    ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
               #structdeclaratorlist {            ## by peg : ( StructDeclarator^ (COMMA StructDeclarator^)*  ) defined in StructDeclaratorList
                  #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
                     #identifier: number   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  }
               }
            }
            #structdeclaration {            ## by peg : ( SpecifierQualifierList (StructDeclaratorList^)? SEMI  ) defined in StructDeclaration
               #typespecifier: char    ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
               #structdeclaratorlist {            ## by peg : ( StructDeclarator^ (COMMA StructDeclarator^)*  ) defined in StructDeclaratorList
                  #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
                     #pointer: *   ## by peg : ( (STAR^ (TypeQualifier^)*)+  ) defined in Pointer
                     #identifier: name   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  }
               }
            }
         }
      }
   }
   #declaration {            ## by peg : ( DeclarationNoAttribute^ ((Attribute / Assembler)^)? SEMI  ) defined in Declaration
      #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)+  ) defined in DeclarationSpecifiers
         #storageclassspecifier: typedef    ## by peg : ( (TYPEDEF / EXTERN / STATIC / AUTO / REGISTER)^  ) defined in StorageClassSpecifier
         #typespecifier {            ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
            #struct: struct    ## by peg : ( STRUCT  ) defined in StructOrUnion
            #identifier: student    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
         }
      }
      #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
         #identifier: Student   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
      }
   }
   #functiondefinition {            ## by peg : ( DeclarationSpecifiers^ Declarator^ (DeclarationList^)? CompoundStatement^  ) defined in FunctionDefinition
      #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)* TypedefName^ (StorageClassSpecifier / TypeQualifier / FunctionSpecifier / Attribute)*  ) defined in DeclarationSpecifiers
         #typedefname {            ## by peg : ( Identifier^  ) defined in TypedefName
            #identifier: Student    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
         }
      }
      #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
         #pointer: *   ## by peg : ( (STAR^ (TypeQualifier^)*)+  ) defined in Pointer
         #identifier: new_Student   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
         #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)+  ) defined in DeclarationSpecifiers
            #typespecifier: void   ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
         }
      }
      #compoundstatement {            ## by peg : ( LWING ((Declaration / Statement)^)* RWING  ) defined in CompoundStatement
         #declaration {            ## by peg : ( DeclarationNoAttribute^ ((Attribute / Assembler)^)? SEMI  ) defined in Declaration
            #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)* TypedefName^ (StorageClassSpecifier / TypeQualifier / FunctionSpecifier / Attribute)*  ) defined in DeclarationSpecifiers
               #typedefname {            ## by peg : ( Identifier^  ) defined in TypedefName
                  #identifier: Student    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               }
            }
            #initdeclarator {            ## by peg : ( (EQU Initializer^)  ) defined in InitDeclarator
               #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
                  #pointer: *   ## by peg : ( (STAR^ (TypeQualifier^)*)+  ) defined in Pointer
                  #identifier: s    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               }
               #initializer {            ## by peg : ( (AssignmentExpression^ / LWING (InitializerList^)* COMMA? RWING)  ) defined in Initializer
                  #castexpression {            ## by peg : ( ((LPAR TypeName RPAR)^)+ UnaryExpression^  ) defined in CastExpression
                     #typename {            ## by peg : ( SpecifierQualifierList^ (AbstractDeclarator^)?  ) defined in TypeName
                        #typedefname {            ## by peg : ( Identifier^  ) defined in TypedefName
                           #identifier: Student    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                        }
                        #pointer: *   ## by peg : ( (STAR^ (TypeQualifier^)*)+  ) defined in Pointer
                     }
                     #apply {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
                        #identifier: malloc   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                        #sizeof {            ## by peg : ( SIZEOF  (UnaryExpression^ / LPAR^ TypeName^ RPAR^) ) defined in UnaryExpression
                           #identifier: Student   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                        }
                     }
                  }
               }
            }
         }
         #expressionstatement {            ## by peg : ( (Expression^)? SEMI  ) defined in ExpressionStatement
            #assignmentexpression {            ## by peg : ( UnaryExpression^ AssignmentOperator^ AssignmentExpression^  ) defined in AssignmentExpression
               #ptr {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
                  #identifier: s   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  #identifier: number    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               }
               #assignmentoperator: =    ## by peg : ( (EQU / STAREQU / DIVEQU / MODEQU / PLUSEQU / MINUSEQU / LEFTEQU / RIGHTEQU / ANDEQU / HATEQU / OREQU)^  ) defined in AssignmentOperator
               #integer: 10   ## by peg : ( (DecimalConstant / HexConstant / OctalConstant) IntegerSuffix?  ) defined in IntegerConstant
            }
         }
         #expressionstatement {            ## by peg : ( (Expression^)? SEMI  ) defined in ExpressionStatement
            #assignmentexpression {            ## by peg : ( UnaryExpression^ AssignmentOperator^ AssignmentExpression^  ) defined in AssignmentExpression
               #ptr {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
                  #identifier: s   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  #identifier: name    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               }
               #assignmentoperator: =    ## by peg : ( (EQU / STAREQU / DIVEQU / MODEQU / PLUSEQU / MINUSEQU / LEFTEQU / RIGHTEQU / ANDEQU / HATEQU / OREQU)^  ) defined in AssignmentOperator
               #string: "naruto"   ## by peg : ( 'L'? (["] (StringChar^)* ["] Spacing)+  ) defined in StringLiteral
            }
         }
         #returnstatement {            ## by peg : ( RETURN^ (Expression^)? SEMI  ) defined in JumpStatement
            #identifier: s   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
         }
      }
   }
   #functiondefinition {            ## by peg : ( DeclarationSpecifiers^ Declarator^ (DeclarationList^)? CompoundStatement^  ) defined in FunctionDefinition
      #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)+  ) defined in DeclarationSpecifiers
         #typespecifier: int    ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
      }
      #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
         #identifier: main   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
         #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)+  ) defined in DeclarationSpecifiers
            #typespecifier: void   ## by peg : ( (VOID / CHAR / SHORT / INT / LONG / FLOAT / DOUBLE / SIGNED / UNSIGNED / BOOL / COMPLEX / StructOrUnionSpecifier / EnumSpecifier)^  ) defined in TypeSpecifier
         }
      }
      #compoundstatement {            ## by peg : ( LWING ((Declaration / Statement)^)* RWING  ) defined in CompoundStatement
         #declaration {            ## by peg : ( DeclarationNoAttribute^ ((Attribute / Assembler)^)? SEMI  ) defined in Declaration
            #declarationspecifier {            ## by peg : ( ((StorageClassSpecifier / TypeQualifier / FunctionSpecifier / Attribute)^)* TypedefName^ (StorageClassSpecifier / TypeQualifier / FunctionSpecifier / Attribute)*  ) defined in DeclarationSpecifiers
               #typedefname {            ## by peg : ( Identifier^  ) defined in TypedefName
                  #identifier: Student    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               }
            }
            #initdeclarator {            ## by peg : ( (EQU Initializer^)  ) defined in InitDeclarator
               #declarator {            ## by peg : ( (Pointer^)? DirectDeclarator^  ) defined in Declarator
                  #pointer: *   ## by peg : ( (STAR^ (TypeQualifier^)*)+  ) defined in Pointer
                  #identifier: a    ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               }
               #initializer {            ## by peg : ( (AssignmentExpression^ / LWING (InitializerList^)* COMMA? RWING)  ) defined in Initializer
                  #apply {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
                     #identifier: new_Student   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  }
               }
            }
         }
         #expressionstatement {            ## by peg : ( (Expression^)? SEMI  ) defined in ExpressionStatement
            #apply {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
               #identifier: printf   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               #argumentexpressionlist {            ## by peg : ( (COMMA AssignmentExpression^)  ) defined in ArgumentExpressionList
                  #string: "%d\n"   ## by peg : ( 'L'? (["] (StringChar^)* ["] Spacing)+  ) defined in StringLiteral
                  #ptr {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
                     #identifier: a   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                     #identifier: number   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  }
               }
            }
         }
         #expressionstatement {            ## by peg : ( (Expression^)? SEMI  ) defined in ExpressionStatement
            #apply {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
               #identifier: printf   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
               #argumentexpressionlist {            ## by peg : ( (COMMA AssignmentExpression^)  ) defined in ArgumentExpressionList
                  #string: "%s\n"   ## by peg : ( 'L'? (["] (StringChar^)* ["] Spacing)+  ) defined in StringLiteral
                  #ptr {            ## by peg : ( (FunctionCall  / Index  / DOT  Identifier^ / PTR  Identifier^ / INC  / DEC ) ) defined in PostfixExpression
                     #identifier: a   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                     #identifier: name   ## by peg : ( !Keyword IdNondigit^ (IdChar^)* Spacing  ) defined in Identifier
                  }
               }
            }
         }
         #returnstatement {            ## by peg : ( RETURN^ (Expression^)? SEMI  ) defined in JumpStatement
            #integer: 0   ## by peg : ( (DecimalConstant / HexConstant / OctalConstant) IntegerSuffix?  ) defined in IntegerConstant
         }
      }
   }
}
