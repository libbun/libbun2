
TopLevel
    = Stmt
    ;

Stmt
    = IfStmt EOS?
    / WhileStmt EOS?
    / ForStmt EOS?
    / ReturnStmt EOS
    / ImportStmt EOS
    / BreakStmt EOS
    / ContinueStmt EOS
    / DefineFunction EOS?
    / DefineClass EOS?
    / Try EOS?
    / Assert EOS
    / Print EOS
    / Raise EOS
    / With EOS
    / Expr EOS?
    / EOS+
    / catch .*
    ;

EOS
    = ";"
    / NL
    / "#" (!'\n' .)* '\n'
    ;

With
    = <<"with" WS+ Expr@ WS+ "as" WS+ Symbol@ WS* ":" Block@ #with>>
    ;

Assert
    = <<"assert" WS+ Expr@ (WS* "," WS* Expr@)? #assert>>
    ;

Print
    = <<"print" WS+ Expr@ #print >>
    ;

Raise
    = <<"raise" WS+ Expr@ #throw >>
    ;

IfStmt
    = <<"if" WS+ Expr@ WS* ":" Block@ (Elif@)* (indent "else" WS* ":" Block@)? #if >>
    ;

Elif
    = <<indent "elif" WS+ Expr@ WS* ":" Block@ #if >>
    ;

WhileStmt
    = <<"while" WS+ Expr@ WS* ":" Block@ #while>>
    ;

ForStmt
    = <<"for" WS+ Symbol@ WS+ "in" WS+ Expr@ ":" Block@ #foreach>>
    ;

ReturnStmt
    = <<"return" WS+ Expr@ #return>>
    ;

ImportStmt
    = <<"import" WS* ImportSymbol@ (WS* "," WS* Symbol@)* #import>>
    / <<"from" WS* Symbol@ WS* "import" WS* ImportSymbol@ (WS* "," WS* ImportSymbol@)* #fromImport>>
    ;

DefineFunction
    = <<"def" WS+ Symbol@ "(" Params@ ")" WS* ":"  Block@ #function>>
    ;

DefineClass
    = <<"class" WS+ Symbol@ (WS* "(" WS* (Extend@)? WS* ")" )? WS* ":" ClassBlock@ #class>>
    ;

Extend
    = << ExtendContent@ #super >>
    ;

ExtendContent
    = Symbol@
    ;

BreakStmt
    = <<"break" #break>>
    ;

ContinueStmt
    = <<"continue" #continue>>
    ;

ReturnStmt
    = <<"return" WS+ Expr@ #return>>
    ;

Block
    = << (WS* EOS+ / indent WS+ Stmt@ EOS?)+ #block>>
    / WS* << Stmt@ #block>>
    ;

ClassBlock
    = NL+ << (WS* EOS+ / indent WS+ ClassStmt@ EOS?)+ #block>>;

ClassStmt
    = Stmt
    //= DefineFunction
    /// Expr
    ;

Try
    = << "try" WS* ":" Block@ "except" WS+ Expr@ WS* ":" Block@ #try >>
    ;

Expr
    = Assign
    ;

Assign
    = OrExpr <<@ WS* AssignOp WS* OrExpr@>>*
    ;

AssignOp
    = '=' !'=' #assign
    / '+='     #addeq
    / '-='     #subeq
    / '*='     #muleq
    / '/='     #diveq
    ;

OrExpr
    = AndExpr <<@ WS* 'or' WS* AndExpr@ #or >>*
    ;

AndExpr
    = BitwiseExpr <<@ WS* 'and' WS* BitwiseExpr@ #and >>*
    ;

BitwiseExpr
    = Equal <<@ WS* ('|' !'|' #bitor / '&' !'&' #bitand / '^' #bitxor) WS* Equal@ >>*
    ;

Equal
    = Relation <<@ WS*  EqOp@ WS* Relation@>>*
    ;

EqOp
    = 'is' WS+ 'not' #noteq
    / 'is' #eq
    / '==' #eq
    / '!=' #noteq
    / 'in' #in
    ;

Relation
    = Shift <<@ WS* ('<' !'<' #lt / '<=' #lte / '>' !'>' #gt / '>=' #gte) WS* Shift@ >>*
    ;

Shift
    = Sum <<@ WS* ('<<' #lshift / '>>' #rshift) WS* Sum@ >>*
    ;

Sum
    = Product <<@ WS* ('+' #add / '-' #sub) WS* Product@ >>*
    ;

Product
    = Unary <<@ WS* ('*' #mul / '/' #div / '%' #mod) WS* Unary@ >>*
    ;

Unary
    = << ('not' #not / '!' #not / '-' #minus / '+' #plus / '~' #compl) Unary@ >>
    / Value <<@ Selector >>*
    ;

Selector
    = '.' Symbol@ #field
    / '[' WS* (Slice / Expr)@ WS* ']' #index
    / '(' << _* ( _* Expr@ ( _* ',' _* Expr@ )* )? #args >>@ ')'  #apply
    ;

Slice
    = << SliceBegin@ WS* ":" WS* SliceEnd@ #slice >>
    / << SliceBegin@ WS* ":" #slice >>
    / << ":" SliceEnd@ #slice >>
    ;

SliceBegin
    = << Expr@ #sliceBegin >>
    ;

SliceEnd
    = << Expr@ #sliceEnd >>
    ;

Value
    = StringLiteral
    / Symbol
    / Number
    / ArrayLiteral
    / MapLiteral
    / TupleLiteral
    ;

ArrayLiteral
    = << "[" _* Expr@? (_* "," _* Expr@)* _* "]" #array>>
    / << "[" _* Expr@ _* "for" _* Symbol@ _* "in" _* Expr@ (_* "if" _* Expr@)? _* "]" #listComprehension >>
    ;

MapLiteral
    = << "{" _* MapContent@? (_* "," _* MapContent@ )* _* "}" #map>>;

TupleLiteral
    = << '(' Expr@ ')' #group >>
    / << "(" _* Expr@ (_* "," _* Expr@)+ _* ")" #tuple>>
    ;

MapContent
    = << (StringLiteral / Symbol)@ _* ":" _* Expr@ #keyvalue>>;

Params
    = << Param@? (_* "," _* Param@)* _* #params>>;

Param
    = << Symbol@ (WS* '=' WS* Expr@)? #param >>
    ;

Args
    = << Expr@? (_* "," _* Expr@)* _* #args>>;

Symbol
    = << "True" #true >>
    / << "False" #false >>
    / << "None" #null >>
    / << [a-zA-Z_][a-zA-Z0-9_]* #name>>
    ;

StringLiteral
    = [bru]? '"""' << ('\\"' / !'"""' .)@*  #string >> '"""'
    / [bru]? "'''" << ("\\'" / !"'''" .)@*  #string >> "'''"
    / [bru]? '"' << ('\\"' / !'"' .)@* #string >> '"'
    / [bru]? "'" << ("\\'" / !"'" .)@* #string >> "'"
    ;

Digits = [0-9]+;

Exponent = [eE] [+-]? Digits;

FloatLiteral
    = "." Digits Exponent?
    / Digits "." Exponent
    / Digits (("." (Digits Exponent?)?) / Exponent);

IntegerLiteral
    = "0" [xX] [0-9a-fA-F]+      // hexadecimal integer
    / "0" [0-7]+                 // octal integer
    / "0"                        // zero
    / [1-9] Digits?;             // decimal integer

Number
    = << ('-' WS* / '+' WS*)? FloatLiteral   #float >>
    / << ('-' WS* / '+' WS*)? IntegerLiteral #integer>>
    ;

Asterisk
    = << '*' #asterisk>>
    ;

ImportSymbol
    = Symbol
    / Asterisk
    ;

WS
    = [ \t];

NL
    = [\n];

_
    = WS
    / NL
    ;
