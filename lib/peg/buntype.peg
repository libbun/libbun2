
TopLevel
  = BunType
  ;

BunType
  = SeqType <<@ (SP '|' SP SeqType@)+ #Tunion >>?
  ;

SeqType
  = AtomType <<@ (' '+ AtomType@)+ #Tbun.and >>?
  ;

AtomType
  = LangType
  / '(' BunType ')'
  / '@' << TypeName  #Tbun.optional >>
  / '#' << TypeName  #Tbun.node >>
  / '!' << LangType@ #Tbun.not >>
  / '$' << TypeName  #Tbun.ref >>
  / '"' << ('\\"' / !'"' .)*  #Tbun.token >> '"'
  / "'" << ('\\"' / !"'" .)*  #Tbun.token >> "'"
  ;

LangType
  = GenericType <<@ SP '[]' #Tarray >>*
  ;

GenericType
  = SingleType <<@ SP '<' SP LangType@ SP (',' SP LangType@ SP )* '>' #Tgeneric >>?
  ;

SingleType
  = << 'void' #Tvoid >>
  / << 'any'  #Tany  >>
  / << '?'    #Tvar  >>
  / << TypeName #type >>
  ;

TypeName
  = [A-Za-z] [A-Za-z0-9_]*
  ;

SP
 = [ \t]*
 ;

