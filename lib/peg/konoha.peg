// Bun's Peg example
// / catch is an extended operator to catch error

//import Value from "value.peg";
//import Type  from "type.peg";


// Preparation for whitespace control

Spacing    
  = [ \t]+
  ;
_ 
  = ([ \t]+ / Comment)*
  ;
NL 
  = ([ \t\n]+ / Comment)*
  ;
Comment    
  = '/*' (!'*/' .)* '*/' 
  / '//' (![\r\n] .)* [\r\n] 
  ;
Token
  = ![A-Za-z0-9_]
  ;
Name
  = <<[A-Za-z_] [A-Za-z0-9_]* #name>> <<@ '::' _? Name@ #ns >>?
  ;

Type 
 = PrimaryType <<@ '[]' #TArray >>*
 ;

PrimaryType
  = BasicType
  / 'Func'  _? << '<' _? Type@ ( _? ',' _? Type@)*  _? '>' #TFunc >>
  / 'Tuple' _? << '<' _? Type@ ( _? ',' _? Type@)*  _? '>' #TTuple >>
  / 'Map'   _? << '<' _? Type@ _? '>' #TMap >>
  / 'Array' _? << '<' _? Type@ _? '>' #TArray >>
  / ObjectType
  ;

BasicType
  = <<'void'    #Tvoid>>
  / <<'boolean' #Tboolean>>
  / <<'int'     #Tint64>>
  / <<'float'   #Tdouble>>
  / <<'String'  #TString>>
  ;

ObjectType
  = << [A-Za-z] [A-Za-z0-9_]*   #type >>
  ;


TopLevel
  = (NL / ';')* TopLevelStmt EOL
  ;

TopLevelStmt
  = 'export' NL (FuncDecl/LetDecl)
  / FuncDecl 
  / LetDecl
  / IfStmt
  / Expr
  / << '' #empty >>
  ;

EOL
  = (!'\n' (';' / _ ))* ('\n' / !.)
  ;

FuncDecl
  = <<'function' _ Name@ _? Params@ _? TypeAnno@ NL? Block@  #function>>
  ;

Params
  = << '(' _? (Param@ ( _? ',' _? Param@)*)? _? ')' #block >>
  ;
Param
  = << Name@ TypeAnno@ #param >>
  ;
TypeAnno
  = (_? ':' _? Type / << '' #Tvar>>)     // imported
  ;

Block
  = << '{' (NL? ( ';' / Stmt@ ) )* NL? '}' #block>>
  ;

Stmt
  = IfStmt
  / VarDecl EOS / LetDecl EOS
  / << 'return' Token (_ Expr@)? #return >> EOS
  / << 'while' _? '(' _? Expr@ _? ')' NL? Block@ #while >>
  / << 'break' #break >> EOS
  / << 'continue' #break >> EOS
  / << 'try' NL? Block@ #try
        << NL? 'catch' _? '(' _? Name@ _? ')' NL? Block@ >>?
        (NL? 'finally' NL? Block@)? >> EOS
  / << 'throw' Token _? Expr@ #throw >> EOS
  / Expr EOS
  / << !'}' BlockSkip #error >>
  ;

BlockSkip
  = (![{}] .)* ('{' BlockSkip '}')?
  ;

EOS   // End of Statement
 = _? ('\n' / ';')
 ;

IfStmt
  = <<'if' #if _? '(' _? Expr@ _? ')' NL? 
       (Block@ (NL? 'else' NL? (IfStmt@ / Block@ / BlockExpected) )? / BlockExpected) >>
  ;

BlockExpected
  = #error `{ is expected` BlockSkip
  ;
  
LetDecl
  = <<'let' _ Name@ TypeAnno@ _? '=' _? Expr@ (_? 'in' _? Block@)? #let  >>
  ;

VarDecl
  = <<'var' _ Name@ TypeAnno@ _? '=' _? Expr@ (_? 'in' _? Block@)? #var >>
  ;
  
Expr
  = Assignment
  ;
  
Assignment
  = Trinary <<@ _? AssignmentLabel Trinary@>>?
  ;

AssignmentLabel
  = '=' !'=' _?  #assign
  / '+='     _?  #addeq
  / '-='     _?  #subeq
  ;

Trinary
  = ExprOrExpr <<@ _? '?' _? Expr@ _? ':' _? Trinary@ #trinary >>*
  ;

ExprOrExpr
  = ExprAndExpr <<@ _? '||' _? ExprAndExpr@ #or >>*
  ;

ExprAndExpr
  = BitwiseBinary <<@ _? '&&' _? BitwiseBinary@ #and >>*
  ;

BitwiseBinary
  = Equal <<@ _? ('|' !'|' #bitor / '&' !'&' #bitand / '^' #bitxor) _? Equal@ >>*
  ;

Equal
  = Relation <<@ _? ('==' #eq / '!=' #noteq) _? Relation@>>*
  ;

Relation
  = Shift <<@ _? ('<' !'<' #lt / '<=' #lte / '>' !'>' #gt / '>=' #gte) _? Shift@ >>*
  ;

Shift
  = Sum <<@ _? ('<<' #lshift / '>>' #rshift) _? Sum@ >>*
  ;
  
Sum 
  = Product <<@ _? ('+' #add / '-' #sub) _? Product@ >>*
  ;

Product
  = Unary <<@ _? ('*' #mul / '/' #div / '%' #mod) _? Unary@ >>*
  ;

Unary
  = << ('!' #not / '-' #minus / '+' #plus / '~' #compl) _? Unary@ >>
  / Primary <<@ Selector>>*
  ;

Selector
  = '.' Name@ #field
  / '[' _ Expr@ ']' #index
  / _? '(' << _ ( Expr@ ( _ ',' _ Expr@ )* )? #arguments >>@ ')'  #apply
  / _? '++' #postinc  / '--' #postdec
  ;
  
Primary
  = << '(' _? Expr@ _? ')' #group >> 
  / << '[' (NL? Expr@ NL? ',')* NL? Expr@? NL? #array ']' >>
  / << '{' NL? ( KeyValue@ ( NL? ',' NL? KeyValue@ )* )? #map '}' >>
  / << '|' Expr@ '|' #size >>
  / <<'function' Token _? Params@ _? TypeAnno@ NL? Block@  #lambda >>
  / Value / Name
  ;

KeyValue 
  = << (String@ / Name@) _? ':' _? Expr@ #keyvalue >>
  ;

Value
  = << 'null'  Token #null >>
  / << 'true'  Token #true >>
  / << 'false' Token #false >>
  / Number
  / String
  ;

Number
 = << [0-9]+ ('.' [0-9]+ 'f'? #double / 'L' #int64 / '' #int) >>
 ;

String
 = '"' StringContent <<@ StringExpr #strings >>? '"'
 ;

StringContent
 = << ('\\"' / (!'"' !'${' .))* #string >>
 ;

StringExpr
 = '${' Expr@ '}' (StringContent@ StringExpr@?)? / '${' StringContent@
 ;

