import BunType from "buntype.peg";

TopLevel
 = Template
 / TypeDef
 / catch (!'\n}' .)* '\n}' 
 ;

Spacing
  = [ \t]+
  ;
_
  = ([ \t]+ / Comment / '')*
  ;
NL
  = ([ \t\n]+ / Comment /'')*
  ;
Comment
  = '/*' (!'*/' .)* '*/'
  / '//' (![\r\n] .)* [\r\n]
  ;

TypeDef
  = NL 'typedef' _ << [A-Za-z0-9_]+ #bun.typedef >> _ ';'?
  ;

Template
  = NL ('bun' / 'template') NL  
    << GreekList@5? NL TemplateName@0 NL Params@1 _ BunAnno@2 _ Checker@4? NL 
      '{' _ '\n' Section@3 '}' #bun 
    >>
  ;
TemplateName
  = << '#'? [A-Za-z0-9_.]+ #name >>  // [A-Za-z0-9_.]
  / "'" << (!"'" .)* #name >>"'"
  ;
GreekList
  = '<' _ << Param@ ((_ ',' _ Param@)*)? #params >> _ '>'
  ;
Params
  = << ('(' _ ('*' / (Param@ (_ ',' _ Param@)*)?) _ ')' / '') #params >>
  ;
Param
  = << ('let' _)? BunName@ _ BunAnno@? #param >>
  ;
BunAnno 
  = ':' _ BunType 
  / << '' #type >>
  ;
Checker
  = '&&' _ BunName '()'
  ;

Section
 = << (!'}' Line@* / '') #bun.sec >>
  ;
Line    
  = [\t ]+ << Chunk@? (Command@ Chunk@)* #bun.line >> '\n'
  / &'$' << (Command@ (![\n$] .)*)* #bun.header >> '\n'
  ;
Chunk 
  = << (![\n$] .)* #bun.chunk >>
  ; 
Command
  = '${' << BunName@ (_ BunName@ Option@* #bun.cmd2 / '' #bun.cmd1) >> '}' 
  / '$'  <<'$' #bun.chunk>>
  ;
BunName
  = << [A-Za-z0-9._]+  #symbol >>
  ;
Option
  = Spacing '"' << (!'"' .)* #value>> '"'
  / Spacing "'" << (!"'" .)* #value>> "'"
  / Spacing << (![} '"\t\n] .)* #value >>
  ;
