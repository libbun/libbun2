typedef boolean
typedef long
typedef double
typedef String
typedef void
typedef Object


bun #block(*): void {
	${statement this}
}

bun #integer(): long {
	${PUSH_AS_LONG this}
}

bun #float() : double {
	${PUSH_AS_DOUBLE this}
}

bun #true() :boolean {
	${PUSH_AS_BOOL true}
}

bun #false() :boolean {
	${PUSH_AS_BOOL false}
}

bun #string() : String {
	${PUSH_AS_STRING}
}

// binary op definition
// ADD
bun #add(x : long, y : long) : long {
	${x} ${y} ${LADD}
}

bun #add(x : long, y : double) : double {
	${x} ${L2D} ${y} ${DADD}
}

bun #add(x : double, y : long) : double {
	${x} ${y} ${L2D} ${DADD}
}

bun #add(x : double, y : double) : double {
	${x} ${y} ${DADD}
}
// string concat
bun #add(x : String, y : long) : String {
	${x} ${y} ${OP}
}

bun #add(x : String, y : double) : String {
	${x} ${y} ${OP}
}

bun #add(x : String, y : boolean) : String {
	${x} ${y} ${OP}
}

bun #add(x : String, y : Object) : String {
	${x} ${y} ${OP}
}

bun #add(x : long, y : String) : String {
	${x} ${y} ${OP}
}

bun #add(x : double, y : String) : String {
	${x} ${y} ${OP}
}

bun #add(x : boolean, y : String) : String {
	${x} ${y} ${OP}
}

bun #add(x : Object, y : String) : String {
	${x} ${y} ${OP}
}

//SUB
bun #sub(x : long, y : long) : long {
	${x} ${y} ${LSUB}
}

bun #sub(x : long, y : double) : double {
	${x} ${L2D} ${y} ${DSUB}
}

bun #sub(x : double, y : long) : double {
	${x} ${y} ${L2D} ${DSUB}
}

bun #sub(x : double, y : double) : double {
	${x} ${y} ${DSUB}
}

// MUL
bun #mul(x : long, y : long) : long {
	${x} ${y} ${LMUL}
}

bun #mul(x : long, y : double) : double {
	${x} ${L2D} ${y} ${DMUL}
}

bun #mul(x : double, y : long) : double {
	${x} ${y} ${L2D} ${DMUL}
}

bun #mul(x : double, y : double) : double {
	${x} ${y} ${DMUL}
}

// DIV
bun #div(x : long, y : long) : long {
	${x} ${y} ${LDIV}
}

bun #div(x : long, y : double) : double {
	${x} ${y} ${DDIV}
}

bun #div(x : double, y : long) : double {
	${x} ${y} ${L2D} ${DDIV}
}

bun #div(x : double, y : double) : double {
	${x} ${y} ${DDIV}
}

// MOD
bun #mod(x : long, y : long) : long {
	${x} ${y} ${OP}
}

bun #mod(x : long, y : double) : double {
	${x} ${y} ${OP}
}

bun #mod(x : double, y : long) : double {
	${x} ${y} ${OP}
}

bun #mod(x : double, y : double) : double {
	${x} ${y} ${OP}
}

// EQ
bun #eq(x : long, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #eq(x : long, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #eq(x : double, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #eq(x : double, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #eq(x : boolean, y : boolean) : boolean {
	${x} ${y} ${OP}
}

bun #eq(x : String, y : String) : boolean {
	${x} ${y} ${OP}
}

bun #eq(x : Object, y : Object) : boolean {
	${x} ${y} ${OP}
}

// NOTEQ
bun #noteq(x : long, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #noteq(x : long, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #noteq(x : double, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #noteq(x : double, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #noteq(x : boolean, y : boolean) : boolean {
	${x} ${y} ${OP}
}

bun #noteq(x : String, y : String) : boolean {
	${x} ${y} ${OP}
}

bun #noteq(x : Object, y : Object) : boolean {
	${x} ${y} ${OP}
}

// LT
bun #lt(x : long, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #lt(x : long, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #lt(x : double, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #lt(x : double, y : double) : boolean {
	${x} ${y} ${OP}
}

// LTE
bun #lte(x : long, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #lte(x : long, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #lte(x : double, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #lte(x : double, y : double) : boolean {
	${x} ${y} ${OP}
}

// GT
bun #gt(x : long, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #gt(x : long, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #gt(x : double, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #gt(x : double, y : double) : boolean {
	${x} ${y} ${OP}
}

// GTE
bun #gte(x : long, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #gte(x : long, y : double) : boolean {
	${x} ${y} ${OP}
}

bun #gte(x : double, y : long) : boolean {
	${x} ${y} ${OP}
}

bun #gte(x : double, y : double) : boolean {
	${x} ${y} ${OP}
}

// unary op definition
// NOT
bun #not(x : boolean) : boolean {
	${x} ${OP}
}

// PLUS
bun #plus(x : long) : long {
	${x} ${INDY plus bsm_UnaryOp Object Object}
}

bun #plus(x : double) : double {
	${x} ${OP}
}

// MINUS
bun #minus(x : long) : long {
	${x} ${OP}
}

bun #minus(x : double) : double {
	${x} ${OP}
}

// COMPL
bun #compl(x : long) : long {
	${x} ${OP}
}

// conditional operator
// And
bun #and(x : boolean, y : boolean) : boolean {
	${AND}
}

// Or
bun #or(x : boolean, y : boolean) : boolean {
	${OR}
}

// LET
bun #let(name, type, value): void && letvar() {
	${VAR_DECL}
}

